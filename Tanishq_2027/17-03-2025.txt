class Solution {
    public boolean divideArray(int[] nums) {
        int[] freq = new int[501];
        for(int i = 0; i<nums.length; i++){
            freq[nums[i]]++;
        }
        for(int i = 0; i<=500; i++){
            if(freq[i]%2!=0){
                return false;
            }
        }
        return true;
    }
}

class Solution {
    public void findPerm(int[] nums, List<List<Integer>> result, List<Integer> curr){
        if(curr.size() == nums.length){
            result.add(new ArrayList<>(curr));
            return;
        }
        for(int i = 0; i<nums.length; i++){
            int ele = nums[i];
            if(!curr.contains(ele)){
                curr.add(ele);
                findPerm(nums, result, curr);
                curr.remove(curr.size()-1);
            }
        }
    }
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        findPerm(nums, res, new ArrayList<>());
        return res;
    }
}
